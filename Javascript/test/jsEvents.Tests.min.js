module("jsEvents: Observer"),test("Constructor: Passed non-function -> Should throw an exception",function(){return raises(function(){var a;return a=new jsEvents.Observer("")})}),test("Constructor: Passed callback function -> Should set @callback",1,function(){var a,b,c;a=function(){},b=new jsEvents.Observer(a),c=b.callback;return equal(c,a)}),module("jsEvents: Event"),test("Constructor: When constructed -> @registeredObservers should be []",1,function(){var a,b;a=new jsEvents.Event,b=a.registeredObservers;return deepEqual(b,[])}),test("register(): Passed Observer -> observer should be added to @registeredObservers",1,function(){var a,b,c;b=new jsEvents.Observer(function(){}),a=new jsEvents.Event,a.register(b),c=a.registeredObservers[0];return equal(c,b)}),test("register(): Passed function -> Should create Observer",1,function(){var a,b,c,d;d=5,a=function(a){return equal(a,d)},b=new jsEvents.Event,c=b.register(a);return b.notify(d)}),test("register(): Parameters valid -> Should return Observer",function(){var a,b,c;b=new jsEvents.Observer(function(){}),a=new jsEvents.Event,c=a.register(b);return equal(c,b)}),test("register(): Passed non-Observer -> Should throw an exception",function(){var a,b;b="",a=new jsEvents.Event;return raises(function(){return a.register(b)})}),test("unregister(): Passed Observer -> Should remove Observer from @registeredObservers",1,function(){var a,b,c;b=new jsEvents.Observer(function(){}),c=new jsEvents.Observer(function(){}),a=new jsEvents.Event,a.register(b),a.register(c),a.unregister(b);return equal(a.registeredObservers.length,1)}),test("unregister(): Passed non-Observer -> Should throw an exception",function(){var a,b;b="",a=new jsEvents.Event;return raises(function(){return a.unregister(b)})}),test("notify(): When called -> Should callback the registered Observers",2,function(){var a,b,c,d;a=function(){return ok(1)},c=new jsEvents.Observer(a),d=new jsEvents.Observer(a),b=new jsEvents.Event,b.register(c),b.register(d);return b.notify()}),test("notify(): When passing parameter -> Observer should be called with parameter",function(){var a,b,c;c={a:"b",c:"d"},a=new jsEvents.Event,b=new jsEvents.Observer(function(a){return deepEqual(a,c)}),a.register(b);return a.notify(c)}),test("notify(): First Observer returns true -> Second observer shouldn't be called",function(){var a,b,c;b=new jsEvents.Observer(function(){return!0}),c=new jsEvents.Observer(function(){return ok(!1,"Should have been stopped by first event")}),a=new jsEvents.Event,a.register(b),a.register(c);return a.notify()})